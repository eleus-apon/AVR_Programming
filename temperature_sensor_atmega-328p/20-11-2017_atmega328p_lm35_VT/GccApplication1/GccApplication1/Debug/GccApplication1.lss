
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000045c  000004d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000096e  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fc  00000000  00000000  00000f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000371  00000000  00000000  000016fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045e  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  00001f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000210e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 99 00 	call	0x132	; 0x132 <main>
  9e:	0c 94 2c 02 	jmp	0x458	; 0x458 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
	
	return 0;
}

void adc_init(void){
	ADCSRA = ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	87 e0       	ldi	r24, 0x07	; 7
  ac:	80 83       	st	Z, r24
	ADMUX = (1<<REFS0);                //Voltage reference from Avcc (5v)
  ae:	80 e4       	ldi	r24, 0x40	; 64
  b0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADEN);                //Turn on ADC
  b4:	80 81       	ld	r24, Z
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <read_adc>:
}

uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0;                    //Clear the older channel that was read
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	90 83       	st	Z, r25
	ADMUX |= channel;                //Defines the new ADC channel to be read
  cc:	90 81       	ld	r25, Z
  ce:	89 2b       	or	r24, r25
  d0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
  dc:	80 81       	ld	r24, Z
  de:	86 fd       	sbrc	r24, 6
  e0:	fd cf       	rjmp	.-6      	; 0xdc <read_adc+0x1a>
	return ADC;                    //Returns the ADC value of the chosen channel
  e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  ea:	08 95       	ret

000000ec <USART_init>:

void USART_init(void){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
  ec:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
  f0:	83 e3       	ldi	r24, 0x33	; 51
  f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 102:	08 95       	ret

00000104 <USART_send>:
}

void USART_send( unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)));
 104:	e0 ec       	ldi	r30, 0xC0	; 192
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	90 81       	ld	r25, Z
 10a:	95 ff       	sbrs	r25, 5
 10c:	fd cf       	rjmp	.-6      	; 0x108 <USART_send+0x4>
	//printf("value is %u ",data);
	//UDR0 = '1';
	UDR0 = data;
 10e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 112:	08 95       	ret

00000114 <USART_putstring>:
	
	
	
}

void USART_putstring(char* StringPtr){
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
 11a:	88 81       	ld	r24, Y
 11c:	88 23       	and	r24, r24
 11e:	31 f0       	breq	.+12     	; 0x12c <USART_putstring+0x18>
 120:	21 96       	adiw	r28, 0x01	; 1
		
		USART_send(*StringPtr);
 122:	0e 94 82 00 	call	0x104	; 0x104 <USART_send>
	
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){
 126:	89 91       	ld	r24, Y+
 128:	81 11       	cpse	r24, r1
 12a:	fb cf       	rjmp	.-10     	; 0x122 <USART_putstring+0xe>
		
		USART_send(*StringPtr);
		StringPtr++;
	}
	
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <main>:
uint16_t read_adc(uint8_t channel);    //Function to read an arbitrary analogic channel/pin
void USART_init(void);            //Function to initialize and configure the USART/serial
void USART_send( unsigned char data);    //Function that sends a char over the serial port
void USART_putstring(char* StringPtr);    //Function that sends a string over the serial port

int main(void){
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	00 d0       	rcall	.+0      	; 0x138 <main+0x6>
 138:	00 d0       	rcall	.+0      	; 0x13a <main+0x8>
 13a:	1f 92       	push	r1
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
	adc_init();        //Setup the ADC
 140:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	USART_init();        //Setup the USART
 144:	0e 94 76 00 	call	0xec	; 0xec <USART_init>
	DDRC = 0xff;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	87 b9       	out	0x07, r24	; 7
	
	while(1){
		uint16_t x= read_adc(0);
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 61 00 	call	0xc2	; 0xc2 <read_adc>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 152:	bc 01       	movw	r22, r24
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__floatunsisf>
 15c:	24 e4       	ldi	r18, 0x44	; 68
 15e:	39 e6       	ldi	r19, 0x69	; 105
 160:	43 e0       	ldi	r20, 0x03	; 3
 162:	50 e4       	ldi	r21, 0x40	; 64
 164:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <__divsf3>
 168:	0e 94 45 01 	call	0x28a	; 0x28a <__fixunssfsi>
 16c:	dc 01       	movw	r26, r24
 16e:	cb 01       	movw	r24, r22
 170:	4a e0       	ldi	r20, 0x0A	; 10
 172:	be 01       	movw	r22, r28
 174:	6f 5f       	subi	r22, 0xFF	; 255
 176:	7f 4f       	sbci	r23, 0xFF	; 255
 178:	0e 94 02 02 	call	0x404	; 0x404 <__utoa_ncheck>
		uint16_t result = x/2.0533; //as refernece voltage 5V=5000
		
		char buffer[5];
		utoa(result,buffer,10);
		USART_putstring("value is :");
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 8a 00 	call	0x114	; 0x114 <USART_putstring>
		USART_putstring(buffer);
 184:	ce 01       	movw	r24, r28
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	0e 94 8a 00 	call	0x114	; 0x114 <USART_putstring>
		USART_send(13);
 18c:	8d e0       	ldi	r24, 0x0D	; 13
 18e:	0e 94 82 00 	call	0x104	; 0x104 <USART_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	81 ee       	ldi	r24, 0xE1	; 225
 196:	94 e0       	ldi	r25, 0x04	; 4
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x66>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x70>
 1a2:	00 00       	nop
 1a4:	d3 cf       	rjmp	.-90     	; 0x14c <main+0x1a>

000001a6 <__divsf3>:
 1a6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <__divsf3x>
 1aa:	0c 94 c8 01 	jmp	0x390	; 0x390 <__fp_round>
 1ae:	0e 94 c1 01 	call	0x382	; 0x382 <__fp_pscB>
 1b2:	58 f0       	brcs	.+22     	; 0x1ca <__divsf3+0x24>
 1b4:	0e 94 ba 01 	call	0x374	; 0x374 <__fp_pscA>
 1b8:	40 f0       	brcs	.+16     	; 0x1ca <__divsf3+0x24>
 1ba:	29 f4       	brne	.+10     	; 0x1c6 <__divsf3+0x20>
 1bc:	5f 3f       	cpi	r21, 0xFF	; 255
 1be:	29 f0       	breq	.+10     	; 0x1ca <__divsf3+0x24>
 1c0:	0c 94 b1 01 	jmp	0x362	; 0x362 <__fp_inf>
 1c4:	51 11       	cpse	r21, r1
 1c6:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__fp_szero>
 1ca:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__fp_nan>

000001ce <__divsf3x>:
 1ce:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fp_split3>
 1d2:	68 f3       	brcs	.-38     	; 0x1ae <__divsf3+0x8>

000001d4 <__divsf3_pse>:
 1d4:	99 23       	and	r25, r25
 1d6:	b1 f3       	breq	.-20     	; 0x1c4 <__divsf3+0x1e>
 1d8:	55 23       	and	r21, r21
 1da:	91 f3       	breq	.-28     	; 0x1c0 <__divsf3+0x1a>
 1dc:	95 1b       	sub	r25, r21
 1de:	55 0b       	sbc	r21, r21
 1e0:	bb 27       	eor	r27, r27
 1e2:	aa 27       	eor	r26, r26
 1e4:	62 17       	cp	r22, r18
 1e6:	73 07       	cpc	r23, r19
 1e8:	84 07       	cpc	r24, r20
 1ea:	38 f0       	brcs	.+14     	; 0x1fa <__divsf3_pse+0x26>
 1ec:	9f 5f       	subi	r25, 0xFF	; 255
 1ee:	5f 4f       	sbci	r21, 0xFF	; 255
 1f0:	22 0f       	add	r18, r18
 1f2:	33 1f       	adc	r19, r19
 1f4:	44 1f       	adc	r20, r20
 1f6:	aa 1f       	adc	r26, r26
 1f8:	a9 f3       	breq	.-22     	; 0x1e4 <__divsf3_pse+0x10>
 1fa:	35 d0       	rcall	.+106    	; 0x266 <__divsf3_pse+0x92>
 1fc:	0e 2e       	mov	r0, r30
 1fe:	3a f0       	brmi	.+14     	; 0x20e <__divsf3_pse+0x3a>
 200:	e0 e8       	ldi	r30, 0x80	; 128
 202:	32 d0       	rcall	.+100    	; 0x268 <__divsf3_pse+0x94>
 204:	91 50       	subi	r25, 0x01	; 1
 206:	50 40       	sbci	r21, 0x00	; 0
 208:	e6 95       	lsr	r30
 20a:	00 1c       	adc	r0, r0
 20c:	ca f7       	brpl	.-14     	; 0x200 <__divsf3_pse+0x2c>
 20e:	2b d0       	rcall	.+86     	; 0x266 <__divsf3_pse+0x92>
 210:	fe 2f       	mov	r31, r30
 212:	29 d0       	rcall	.+82     	; 0x266 <__divsf3_pse+0x92>
 214:	66 0f       	add	r22, r22
 216:	77 1f       	adc	r23, r23
 218:	88 1f       	adc	r24, r24
 21a:	bb 1f       	adc	r27, r27
 21c:	26 17       	cp	r18, r22
 21e:	37 07       	cpc	r19, r23
 220:	48 07       	cpc	r20, r24
 222:	ab 07       	cpc	r26, r27
 224:	b0 e8       	ldi	r27, 0x80	; 128
 226:	09 f0       	breq	.+2      	; 0x22a <__divsf3_pse+0x56>
 228:	bb 0b       	sbc	r27, r27
 22a:	80 2d       	mov	r24, r0
 22c:	bf 01       	movw	r22, r30
 22e:	ff 27       	eor	r31, r31
 230:	93 58       	subi	r25, 0x83	; 131
 232:	5f 4f       	sbci	r21, 0xFF	; 255
 234:	3a f0       	brmi	.+14     	; 0x244 <__divsf3_pse+0x70>
 236:	9e 3f       	cpi	r25, 0xFE	; 254
 238:	51 05       	cpc	r21, r1
 23a:	78 f0       	brcs	.+30     	; 0x25a <__divsf3_pse+0x86>
 23c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__fp_inf>
 240:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__fp_szero>
 244:	5f 3f       	cpi	r21, 0xFF	; 255
 246:	e4 f3       	brlt	.-8      	; 0x240 <__divsf3_pse+0x6c>
 248:	98 3e       	cpi	r25, 0xE8	; 232
 24a:	d4 f3       	brlt	.-12     	; 0x240 <__divsf3_pse+0x6c>
 24c:	86 95       	lsr	r24
 24e:	77 95       	ror	r23
 250:	67 95       	ror	r22
 252:	b7 95       	ror	r27
 254:	f7 95       	ror	r31
 256:	9f 5f       	subi	r25, 0xFF	; 255
 258:	c9 f7       	brne	.-14     	; 0x24c <__divsf3_pse+0x78>
 25a:	88 0f       	add	r24, r24
 25c:	91 1d       	adc	r25, r1
 25e:	96 95       	lsr	r25
 260:	87 95       	ror	r24
 262:	97 f9       	bld	r25, 7
 264:	08 95       	ret
 266:	e1 e0       	ldi	r30, 0x01	; 1
 268:	66 0f       	add	r22, r22
 26a:	77 1f       	adc	r23, r23
 26c:	88 1f       	adc	r24, r24
 26e:	bb 1f       	adc	r27, r27
 270:	62 17       	cp	r22, r18
 272:	73 07       	cpc	r23, r19
 274:	84 07       	cpc	r24, r20
 276:	ba 07       	cpc	r27, r26
 278:	20 f0       	brcs	.+8      	; 0x282 <__divsf3_pse+0xae>
 27a:	62 1b       	sub	r22, r18
 27c:	73 0b       	sbc	r23, r19
 27e:	84 0b       	sbc	r24, r20
 280:	ba 0b       	sbc	r27, r26
 282:	ee 1f       	adc	r30, r30
 284:	88 f7       	brcc	.-30     	; 0x268 <__divsf3_pse+0x94>
 286:	e0 95       	com	r30
 288:	08 95       	ret

0000028a <__fixunssfsi>:
 28a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__fp_splitA>
 28e:	88 f0       	brcs	.+34     	; 0x2b2 <__fixunssfsi+0x28>
 290:	9f 57       	subi	r25, 0x7F	; 127
 292:	98 f0       	brcs	.+38     	; 0x2ba <__fixunssfsi+0x30>
 294:	b9 2f       	mov	r27, r25
 296:	99 27       	eor	r25, r25
 298:	b7 51       	subi	r27, 0x17	; 23
 29a:	b0 f0       	brcs	.+44     	; 0x2c8 <__fixunssfsi+0x3e>
 29c:	e1 f0       	breq	.+56     	; 0x2d6 <__fixunssfsi+0x4c>
 29e:	66 0f       	add	r22, r22
 2a0:	77 1f       	adc	r23, r23
 2a2:	88 1f       	adc	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	1a f0       	brmi	.+6      	; 0x2ae <__fixunssfsi+0x24>
 2a8:	ba 95       	dec	r27
 2aa:	c9 f7       	brne	.-14     	; 0x29e <__fixunssfsi+0x14>
 2ac:	14 c0       	rjmp	.+40     	; 0x2d6 <__fixunssfsi+0x4c>
 2ae:	b1 30       	cpi	r27, 0x01	; 1
 2b0:	91 f0       	breq	.+36     	; 0x2d6 <__fixunssfsi+0x4c>
 2b2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fp_zero>
 2b6:	b1 e0       	ldi	r27, 0x01	; 1
 2b8:	08 95       	ret
 2ba:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__fp_zero>
 2be:	67 2f       	mov	r22, r23
 2c0:	78 2f       	mov	r23, r24
 2c2:	88 27       	eor	r24, r24
 2c4:	b8 5f       	subi	r27, 0xF8	; 248
 2c6:	39 f0       	breq	.+14     	; 0x2d6 <__fixunssfsi+0x4c>
 2c8:	b9 3f       	cpi	r27, 0xF9	; 249
 2ca:	cc f3       	brlt	.-14     	; 0x2be <__fixunssfsi+0x34>
 2cc:	86 95       	lsr	r24
 2ce:	77 95       	ror	r23
 2d0:	67 95       	ror	r22
 2d2:	b3 95       	inc	r27
 2d4:	d9 f7       	brne	.-10     	; 0x2cc <__fixunssfsi+0x42>
 2d6:	3e f4       	brtc	.+14     	; 0x2e6 <__fixunssfsi+0x5c>
 2d8:	90 95       	com	r25
 2da:	80 95       	com	r24
 2dc:	70 95       	com	r23
 2de:	61 95       	neg	r22
 2e0:	7f 4f       	sbci	r23, 0xFF	; 255
 2e2:	8f 4f       	sbci	r24, 0xFF	; 255
 2e4:	9f 4f       	sbci	r25, 0xFF	; 255
 2e6:	08 95       	ret

000002e8 <__floatunsisf>:
 2e8:	e8 94       	clt
 2ea:	09 c0       	rjmp	.+18     	; 0x2fe <__floatsisf+0x12>

000002ec <__floatsisf>:
 2ec:	97 fb       	bst	r25, 7
 2ee:	3e f4       	brtc	.+14     	; 0x2fe <__floatsisf+0x12>
 2f0:	90 95       	com	r25
 2f2:	80 95       	com	r24
 2f4:	70 95       	com	r23
 2f6:	61 95       	neg	r22
 2f8:	7f 4f       	sbci	r23, 0xFF	; 255
 2fa:	8f 4f       	sbci	r24, 0xFF	; 255
 2fc:	9f 4f       	sbci	r25, 0xFF	; 255
 2fe:	99 23       	and	r25, r25
 300:	a9 f0       	breq	.+42     	; 0x32c <__floatsisf+0x40>
 302:	f9 2f       	mov	r31, r25
 304:	96 e9       	ldi	r25, 0x96	; 150
 306:	bb 27       	eor	r27, r27
 308:	93 95       	inc	r25
 30a:	f6 95       	lsr	r31
 30c:	87 95       	ror	r24
 30e:	77 95       	ror	r23
 310:	67 95       	ror	r22
 312:	b7 95       	ror	r27
 314:	f1 11       	cpse	r31, r1
 316:	f8 cf       	rjmp	.-16     	; 0x308 <__floatsisf+0x1c>
 318:	fa f4       	brpl	.+62     	; 0x358 <__floatsisf+0x6c>
 31a:	bb 0f       	add	r27, r27
 31c:	11 f4       	brne	.+4      	; 0x322 <__floatsisf+0x36>
 31e:	60 ff       	sbrs	r22, 0
 320:	1b c0       	rjmp	.+54     	; 0x358 <__floatsisf+0x6c>
 322:	6f 5f       	subi	r22, 0xFF	; 255
 324:	7f 4f       	sbci	r23, 0xFF	; 255
 326:	8f 4f       	sbci	r24, 0xFF	; 255
 328:	9f 4f       	sbci	r25, 0xFF	; 255
 32a:	16 c0       	rjmp	.+44     	; 0x358 <__floatsisf+0x6c>
 32c:	88 23       	and	r24, r24
 32e:	11 f0       	breq	.+4      	; 0x334 <__floatsisf+0x48>
 330:	96 e9       	ldi	r25, 0x96	; 150
 332:	11 c0       	rjmp	.+34     	; 0x356 <__floatsisf+0x6a>
 334:	77 23       	and	r23, r23
 336:	21 f0       	breq	.+8      	; 0x340 <__floatsisf+0x54>
 338:	9e e8       	ldi	r25, 0x8E	; 142
 33a:	87 2f       	mov	r24, r23
 33c:	76 2f       	mov	r23, r22
 33e:	05 c0       	rjmp	.+10     	; 0x34a <__floatsisf+0x5e>
 340:	66 23       	and	r22, r22
 342:	71 f0       	breq	.+28     	; 0x360 <__floatsisf+0x74>
 344:	96 e8       	ldi	r25, 0x86	; 134
 346:	86 2f       	mov	r24, r22
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	2a f0       	brmi	.+10     	; 0x358 <__floatsisf+0x6c>
 34e:	9a 95       	dec	r25
 350:	66 0f       	add	r22, r22
 352:	77 1f       	adc	r23, r23
 354:	88 1f       	adc	r24, r24
 356:	da f7       	brpl	.-10     	; 0x34e <__floatsisf+0x62>
 358:	88 0f       	add	r24, r24
 35a:	96 95       	lsr	r25
 35c:	87 95       	ror	r24
 35e:	97 f9       	bld	r25, 7
 360:	08 95       	ret

00000362 <__fp_inf>:
 362:	97 f9       	bld	r25, 7
 364:	9f 67       	ori	r25, 0x7F	; 127
 366:	80 e8       	ldi	r24, 0x80	; 128
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	08 95       	ret

0000036e <__fp_nan>:
 36e:	9f ef       	ldi	r25, 0xFF	; 255
 370:	80 ec       	ldi	r24, 0xC0	; 192
 372:	08 95       	ret

00000374 <__fp_pscA>:
 374:	00 24       	eor	r0, r0
 376:	0a 94       	dec	r0
 378:	16 16       	cp	r1, r22
 37a:	17 06       	cpc	r1, r23
 37c:	18 06       	cpc	r1, r24
 37e:	09 06       	cpc	r0, r25
 380:	08 95       	ret

00000382 <__fp_pscB>:
 382:	00 24       	eor	r0, r0
 384:	0a 94       	dec	r0
 386:	12 16       	cp	r1, r18
 388:	13 06       	cpc	r1, r19
 38a:	14 06       	cpc	r1, r20
 38c:	05 06       	cpc	r0, r21
 38e:	08 95       	ret

00000390 <__fp_round>:
 390:	09 2e       	mov	r0, r25
 392:	03 94       	inc	r0
 394:	00 0c       	add	r0, r0
 396:	11 f4       	brne	.+4      	; 0x39c <__fp_round+0xc>
 398:	88 23       	and	r24, r24
 39a:	52 f0       	brmi	.+20     	; 0x3b0 <__fp_round+0x20>
 39c:	bb 0f       	add	r27, r27
 39e:	40 f4       	brcc	.+16     	; 0x3b0 <__fp_round+0x20>
 3a0:	bf 2b       	or	r27, r31
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <__fp_round+0x18>
 3a4:	60 ff       	sbrs	r22, 0
 3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <__fp_round+0x20>
 3a8:	6f 5f       	subi	r22, 0xFF	; 255
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	8f 4f       	sbci	r24, 0xFF	; 255
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	08 95       	ret

000003b2 <__fp_split3>:
 3b2:	57 fd       	sbrc	r21, 7
 3b4:	90 58       	subi	r25, 0x80	; 128
 3b6:	44 0f       	add	r20, r20
 3b8:	55 1f       	adc	r21, r21
 3ba:	59 f0       	breq	.+22     	; 0x3d2 <__fp_splitA+0x10>
 3bc:	5f 3f       	cpi	r21, 0xFF	; 255
 3be:	71 f0       	breq	.+28     	; 0x3dc <__fp_splitA+0x1a>
 3c0:	47 95       	ror	r20

000003c2 <__fp_splitA>:
 3c2:	88 0f       	add	r24, r24
 3c4:	97 fb       	bst	r25, 7
 3c6:	99 1f       	adc	r25, r25
 3c8:	61 f0       	breq	.+24     	; 0x3e2 <__fp_splitA+0x20>
 3ca:	9f 3f       	cpi	r25, 0xFF	; 255
 3cc:	79 f0       	breq	.+30     	; 0x3ec <__fp_splitA+0x2a>
 3ce:	87 95       	ror	r24
 3d0:	08 95       	ret
 3d2:	12 16       	cp	r1, r18
 3d4:	13 06       	cpc	r1, r19
 3d6:	14 06       	cpc	r1, r20
 3d8:	55 1f       	adc	r21, r21
 3da:	f2 cf       	rjmp	.-28     	; 0x3c0 <__fp_split3+0xe>
 3dc:	46 95       	lsr	r20
 3de:	f1 df       	rcall	.-30     	; 0x3c2 <__fp_splitA>
 3e0:	08 c0       	rjmp	.+16     	; 0x3f2 <__fp_splitA+0x30>
 3e2:	16 16       	cp	r1, r22
 3e4:	17 06       	cpc	r1, r23
 3e6:	18 06       	cpc	r1, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	f1 cf       	rjmp	.-30     	; 0x3ce <__fp_splitA+0xc>
 3ec:	86 95       	lsr	r24
 3ee:	71 05       	cpc	r23, r1
 3f0:	61 05       	cpc	r22, r1
 3f2:	08 94       	sec
 3f4:	08 95       	ret

000003f6 <__fp_zero>:
 3f6:	e8 94       	clt

000003f8 <__fp_szero>:
 3f8:	bb 27       	eor	r27, r27
 3fa:	66 27       	eor	r22, r22
 3fc:	77 27       	eor	r23, r23
 3fe:	cb 01       	movw	r24, r22
 400:	97 f9       	bld	r25, 7
 402:	08 95       	ret

00000404 <__utoa_ncheck>:
 404:	bb 27       	eor	r27, r27

00000406 <__utoa_common>:
 406:	fb 01       	movw	r30, r22
 408:	55 27       	eor	r21, r21
 40a:	aa 27       	eor	r26, r26
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	aa 1f       	adc	r26, r26
 412:	a4 17       	cp	r26, r20
 414:	10 f0       	brcs	.+4      	; 0x41a <__utoa_common+0x14>
 416:	a4 1b       	sub	r26, r20
 418:	83 95       	inc	r24
 41a:	50 51       	subi	r21, 0x10	; 16
 41c:	b9 f7       	brne	.-18     	; 0x40c <__utoa_common+0x6>
 41e:	a0 5d       	subi	r26, 0xD0	; 208
 420:	aa 33       	cpi	r26, 0x3A	; 58
 422:	08 f0       	brcs	.+2      	; 0x426 <__utoa_common+0x20>
 424:	a9 5d       	subi	r26, 0xD9	; 217
 426:	a1 93       	st	Z+, r26
 428:	00 97       	sbiw	r24, 0x00	; 0
 42a:	79 f7       	brne	.-34     	; 0x40a <__utoa_common+0x4>
 42c:	b1 11       	cpse	r27, r1
 42e:	b1 93       	st	Z+, r27
 430:	11 92       	st	Z+, r1
 432:	cb 01       	movw	r24, r22
 434:	0c 94 1c 02 	jmp	0x438	; 0x438 <strrev>

00000438 <strrev>:
 438:	dc 01       	movw	r26, r24
 43a:	fc 01       	movw	r30, r24
 43c:	67 2f       	mov	r22, r23
 43e:	71 91       	ld	r23, Z+
 440:	77 23       	and	r23, r23
 442:	e1 f7       	brne	.-8      	; 0x43c <strrev+0x4>
 444:	32 97       	sbiw	r30, 0x02	; 2
 446:	04 c0       	rjmp	.+8      	; 0x450 <strrev+0x18>
 448:	7c 91       	ld	r23, X
 44a:	6d 93       	st	X+, r22
 44c:	70 83       	st	Z, r23
 44e:	62 91       	ld	r22, -Z
 450:	ae 17       	cp	r26, r30
 452:	bf 07       	cpc	r27, r31
 454:	c8 f3       	brcs	.-14     	; 0x448 <strrev+0x10>
 456:	08 95       	ret

00000458 <_exit>:
 458:	f8 94       	cli

0000045a <__stop_program>:
 45a:	ff cf       	rjmp	.-2      	; 0x45a <__stop_program>
